package de.wobkenh.pgen

import java.io.File
import java.time.LocalDateTime

object PumlWriter {

    private val newLine = PGenConstants.newLine
    private val separator = File.separator

    fun writePuml(
        pumlBodyString: String,
        directories: List<File>,
        attributeVisibility: Visibility,
        methodVisibility: Visibility,
        scale: String?,
        title: String?,
        caption: String?,
        leftToRightDirection: Boolean,
        outputFile: File
    ) {
        val headerLines = mutableListOf(
            "@startuml",
            "/'",
            "    PUML Class Diagram generated by PGen",
            "    Date: ${LocalDateTime.now()}",
            "    Scope:",
            directories.joinToString(newLine) { "    # Project: ${getProjectName(it)} Package: ${getPackagePath(it)}" },
            "'/"
        )
        if (attributeVisibility == Visibility.NONE && methodVisibility == Visibility.NONE) {
            headerLines.add("hide members")
        }
        if (scale != null) {
            headerLines.add("scale $scale")
        }
        if (title != null) {
            headerLines.add("title $title")
        }
        if (caption != null) {
            headerLines.add("caption $caption")
        }
        if (leftToRightDirection) {
            headerLines.add("left to right direction")
        }
        val footer = "@enduml"
        outputFile.writeText(listOf(headerLines.joinToString(newLine), pumlBodyString, footer).joinToString(newLine))
    }

    private fun getProjectName(file: File): String =
        file.absolutePath.split("${separator}src${separator}main${separator}java")[0].split(separator).last()

    private fun getPackagePath(file: File): String = if (file.name == "java") {
        "<root>"
    } else {
        file.absolutePath.split("src${separator}main${separator}java$separator")[1].replace(separator, ".")
    }

}