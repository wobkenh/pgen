package de.wobkenh.pgen

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import java.io.File
import java.time.LocalDateTime
import kotlin.system.exitProcess

class PGen : CliktCommand() {

    val packagePath: String by option(help = "The package to analyze (OPTIONAL)").default("")
    val directory: File? by option(help = "Sources root directory (REQUIRED)").file()
    val outputFile: File by option(help = "Output file for PUML Class Diagram").file().default(File("output.puml"))
    val newLine = System.lineSeparator()

    override fun run() {
        if (directory == null) {
            println("No sources root directory provided.")
            exitProcess(1)
        }

        println("Generating PUML Class Diagram for classes in package path $packagePath")
        println("Using ${outputFile.absolutePath} as output path")

        if (outputFile.exists()) {
            if (outputFile.isFile) {
                println("Output file already exists. It will be overwritten")
            } else {
                println("Output file already exists and is not a file.")
                exitProcess(1)
            }
        }

        val pumlString = File(directory, packagePath.replace(".", "/")).walk()
            .filter { it.isFile }
            .flatMap { file ->
                val compilationUnit = StaticJavaParser.parse(file)
                compilationUnit.findAll(ClassOrInterfaceDeclaration::class.java).map { clazz ->
                    val extendedClassName =
                        if (clazz.extendedTypes.isNonEmpty) clazz.extendedTypes[0].nameAsString else ""
                    val implementedClassNames = clazz.implementedTypes.map { it.nameAsString }
                    ClassDescriptor(clazz.nameAsString, extendedClassName, implementedClassNames)
                }.asSequence()
            }.flatMap { classDescriptor ->
                println("Found class ${classDescriptor.className} extending ${classDescriptor.extendedClassName} implementing interfaces ${classDescriptor.implementedClassNames}")
                // single lines
                val separator = "'------------------------"
                val classDefinition = "class ${classDescriptor.className}"
                val classExtension = if (classDescriptor.extendedClassName.isNotEmpty()) {
                    "${classDescriptor.className} -> ${classDescriptor.extendedClassName}"
                } else ""
                val classImplementations =
                    classDescriptor.implementedClassNames.map { "${classDescriptor.className} --> $it" }

                // Creating the list
                val lines = mutableListOf(separator, "", classDefinition)
                if (classExtension.isNotEmpty()) {
                    lines.add(classExtension)
                }
                lines.addAll(classImplementations)
                lines.add("")
                lines.asSequence()
            }.joinToString(newLine)

        val header = listOf(
            "@startuml",
            "/'",
            "    PUML Class Diagram generated by PGen",
            "    Date: ${LocalDateTime.now()}",
            "    Package: $packagePath",
            "'/"
        ).joinToString(newLine)
        val footer = "@enduml"
        outputFile.writeText(listOf(header, pumlString, footer).joinToString(newLine))
    }

}

fun main(args: Array<String>) = PGen().main(args)